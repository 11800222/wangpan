<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            ">
	<!--spring 和 hibernate 整合 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/ss?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true"></property>
		<property name="username" value="root"></property>
		<property name="password" value=""></property>

	</bean>
	 <!-- spring管理session的SessiongFacorty -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mappingLocations">
			<value>classpath:model/*.hbm.xml</value>
		</property>
		<property name="packagesToScan">
			<list>
				<value>model</value>
			</list>
		</property>
		<!--设置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<!-- model表与数据库表的关系 -->
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<!-- 输出数据库操作到控制台，再下面两条是格式 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- 如果用的是getCurrentSession的集成方式，就不能设置hibernate的current_session_context_class为thread，而应该空着，让spring帮你。 -->
				<prop key="hibernate.current_session_context_class">
					org.springframework.orm.hibernate4.SpringSessionContext
				</prop>

			</props>
		</property>
	</bean>
	 <!-- 自己管理session的SessiongFacorty -->
	<bean id="MysessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mappingLocations">
			<value>classpath:model/*.hbm.xml</value>
		</property>
		<property name="packagesToScan">
			<list>
				<value>model</value>
			</list>
		</property>
		<!--设置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<!-- model表与数据库表的关系 -->
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<!-- 输出数据库操作到控制台，再下面两条是格式 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- 如果用的是getCurrentSession的集成方式，就不能设置hibernate的current_session_context_class为thread，而应该空着，让spring帮你。 -->
				<prop key="hibernate.current_session_context_class">
					thread
				</prop>

			</props>
		</property>
	</bean>
	<!-- spring AOP 增强事务 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 支持事务注解的意思，但这里不用，注释掉 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	<!-- 设置为切面增强的方法为事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!-- 设置切点并设置切面 -->
	<aop:config>
		<aop:pointcut id="leePointcut" expression="execution(* service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="leePointcut" />
	</aop:config>

	<!-- DaoImpl -->
	<!-- 这里设置一个父bean让其他子bean继承,只是为了不重复编写 -->
	<bean id="parentbean" abstract="true" lazy-init="true">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<bean id="userDaoimpl" class="dao.userDaoImpl" parent="parentbean" />
	<bean id="OperlogsDaoImpl" class="dao.OperlogsDaoImpl" parent="parentbean" />
	<bean id="FilesDaoImpl" class="dao.FilesDaoImpl" parent="parentbean" />
    <bean id="TasksDaoImpl" class="dao.TasksDaoImpl" parent="parentbean" />
    
    <!-- 使用自己管理session的sessionFactory的那一份DaoImpl -->
    <bean id="myparentbean" abstract="true" lazy-init="true">
		<property name="sessionFactory" ref="MysessionFactory" />
	</bean>
	<bean id="myuserDaoimpl" class="dao.userDaoImpl" parent="myparentbean" />
	<bean id="myOperlogsDaoImpl" class="dao.OperlogsDaoImpl" parent="myparentbean" />
	<bean id="myFilesDaoImpl" class="dao.FilesDaoImpl" parent="myparentbean" />
    <bean id="myTasksDaoImpl" class="dao.TasksDaoImpl" parent="myparentbean" />
	<!--Service -->
	<bean id="UserService" class="service.UserService">
		<property name="userdaoimpl" ref="userDaoimpl"></property>
	</bean>
	<bean id="OperlogsService" class="service.OperlogsService">
		<property name="operlogsDaoImpl" ref="OperlogsDaoImpl"></property>
	</bean>
	<bean id="FilesService" class="service.FilesService">
		<property name="filesdaoimpl" ref="FilesDaoImpl"></property>
	</bean>
	<bean id="TasksService" class="service.TasksService">
		<property name="taskDaoImpl" ref="TasksDaoImpl"></property>
	</bean>
	 <!-- 使用自己管理session的sessionFactory的那一份Service -->
	<bean id="myUserService" class="service.UserService">
		<property name="userdaoimpl" ref="myuserDaoimpl"></property>
	</bean>
	<bean id="myOperlogsService" class="service.OperlogsService">
		<property name="operlogsDaoImpl" ref="myOperlogsDaoImpl"></property>
	</bean>
	<bean id="myFilesService" class="service.FilesService">
		<property name="filesdaoimpl" ref="myFilesDaoImpl"></property>
	</bean>
	<bean id="myTasksService" class="service.TasksService">
		<property name="taskDaoImpl" ref="myTasksDaoImpl"></property>
	</bean>
	
	
	<!-- Action -->
	<bean id="UserAction" class="action.UserAction" scope="prototype">
		<property name="userService" ref="UserService" />
		<property name="operlogsService" ref="OperlogsService" />
	</bean>

	<bean id="TestAction" class="action.TestAction" scope="prototype">
		<property name="filesService" ref="FilesService" />
		<property name="usersService" ref="UserService" />
	</bean>

	<bean id="FileAction" class="action.FileAction" scope="prototype">
		<property name="filesService" ref="FilesService" />
		<property name="usersService" ref="UserService" />
		<property name="taskService" ref="TasksService" />
	</bean>
	
	<!-- mybeans -->
	 <bean id="MyExecutor" class="Core.MyExecutor" init-method="" destroy-method="shutdown">
	        <property name="myfileService" ref="myFilesService" />
	 </bean>  
	 
	 <bean id="TaskConsumerBean" class="Core.TaskConsumer" 
	 init-method="pollForTasks" destroy-method="PersistTasks">  
         <property name="mytaskService" ref="myTasksService" />
          <property name="myExecutor" ref="MyExecutor" />
     </bean>
      
     
</beans>
	
	
	
	
	
	
	
	
	
	
	